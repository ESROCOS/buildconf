#! /bin/sh

# URLs to install from GitHub
#CONF_URL=https://github.com/ESROCOS/buildconf.git
#AUTOPROJ_CONFIG_URL=https://raw.githubusercontent.com/ESROCOS/buildconf/master/config.yml
#AUTOPROJ_BOOTSTRAP_URL=https://rock-robotics.org/master/autoproj_bootstrap
#DOWNLOAD_AUTOPROJ_CONFIG=true

# URLs to install from GMV's GitLab
CONF_URL=https://spass-git-ext.gmv.com/PERASPERA/MOSAR/ESROCOS/buildconf
AUTOPROJ_CONFIG_URL=$(realpath $(dirname $0))/config.yml
AUTOPROJ_BOOTSTRAP_URL=$(realpath $(dirname $0))/autoproj_bootstrap
DOWNLOAD_AUTOPROJ_CONFIG=false

# DOWNLOAD_AUTOPROJ_CONFIG indicates that the autoproj files can be downloaded from a public repo
# When using a private repo, the files must be copied from a local path instead

if test $DOWNLOAD_AUTOPROJ_CONFIG != true ; then
    if ! test -f $AUTOPROJ_CONFIG_URL; then
        echo "config.yml not found in the same directory as install_esrocos"
        exit 1
    fi
    if ! test -f $AUTOPROJ_BOOTSTRAP_URL; then
        echo "autoproj_bootstrap not found in the same directory as install_esrocos"
        exit 1
    fi
fi

#Which ESROCOS buildconf branch to check out 
if [[ -z $ESROCOS_BRANCH ]]; then
  ESROCOS_BRANCH="master"
fi

echo "checking out branch: $ESROCOS_BRANCH"

RUBY=ruby
BOOTSTRAP_ARGS=

set -e

mkdir -p ~/esrocos_workspace/.autoproj

cd ~/esrocos_workspace

if ! which $RUBY > /dev/null 2>&1; then
    echo "cannot find the ruby executable. On Ubuntu 16.04 and above, you should run"
    echo "  sudo apt-get install ruby"
    echo "or on Ubuntu 14.04"
    echo "  sudo apt-get install ruby2.0"
    exit 1
fi

RUBY_VERSION_VALID=`$RUBY -e 'STDOUT.puts RUBY_VERSION.to_f >= 2.0'`

if [ "x$RUBY_VERSION_VALID" != "xtrue" ]; then
    if test "$RUBY_USER_SELECTED" = "1"; then
        echo "You selected $RUBY as the ruby executable, and it is not providing Ruby >= 2.0"
    else
        cat <<EOMSG
ruby --version reports
  `$RUBY --version`
The supported version for Rock is ruby >= 2.0. I don't know if you have it
installed, and if you do what name it has. You will have to select a Ruby
executable by passing it on the command line, as e.g.
  sh bootstrap.sh ruby2.1
EOMSG
        exit 1
    fi
fi

# test if ruby-dev was installed
if ! dpkg --get-selections | grep -q "ruby.*-dev"; then
  echo -e "\e[93mRuby has been installed, but you might need the development headers, too. You should run"
  echo -e "  \e[93msudo apt-get install ruby2.3-dev\e[39m" 
  exit 1
else 
  echo "ruby-dev installed"  
fi

# FINALLY NO MORE RUBY
# DOWNLOAD AUTOPROJ

if which wget > /dev/null; then
    DOWNLOADER=wget
elif which curl > /dev/null; then
    DOWNLOADER=curl
else
    echo "I can find neither curl nor wget, either install one of these or"
    echo "download the following script yourself, and re-run this script"
    exit 1
fi

if ! test -f $PWD/autoproj_bootstrap; then
    if $DOWNLOAD_AUTOPROJ_CONFIG = true ; then
        $DOWNLOADER $AUTOPROJ_BOOTSTRAP_URL
    else
        cp $AUTOPROJ_BOOTSTRAP_URL .
    fi
fi

# DECIDES HOW TO DOWNLOAD STUFF

CONF_URL=${CONF_URL#*//}
CONF_SITE=${CONF_URL%%/*}
CONF_REPO=${CONF_URL#*/}

GET_REPO=https://$CONF_SITE/$CONF_REPO
PUSH_TO=$GET_REPO

until [ -n "$GET_REPO" ]
do
    echo -n "Which protocol do you want to use to access $CONF_REPO on $CONF_SITE? [git|ssh|http] (default: ssh) "
    read ANSWER
    ANSWER=`echo $ANSWER | tr "[:upper:]" "[:lower:]"`
    case "$ANSWER" in
        "ssh"|"") 
		GET_REPO=git@$CONF_SITE:$CONF_REPO ;;
        "http")
		GET_REPO=https://$CONF_SITE/$CONF_REPO ;;
        "git")
		GET_REPO=git://$CONF_SITE/$CONF_REPO ;;
    esac
    PUSH_TO=${GET_REPO}	
done

# DECIDES HOW TO DOWNLOAD STUFF


until [ -n "$ESROCOS_BRANCH" ]
do
    echo -n "Which version do you want to install? [master|stable|<other branch>] (default: master) "
    read ANSWER
    ANSWER=`echo $ANSWER | tr "[:upper:]" "[:lower:]"`
    case "$ANSWER" in
        "master"|"") ESROCOS_BRANCH="master" ;;
        "stable") ESROCOS_BRANCH="stable" ;;
        *) ESROCOS_BRANCH=$ANSWER ;;
    esac
done

# DOWNLOAD AUTOPROJ STUFF

cd ~/esrocos_workspace/.autoproj

if $DOWNLOAD_AUTOPROJ_CONFIG = true ; then
    $DOWNLOADER $AUTOPROJ_CONFIG_URL
else
    cp $AUTOPROJ_CONFIG_URL .
fi

cd ..

echo "checking out $BRANCH"

export AUTOPROJ_BOOTSTRAP_IGNORE_NONEMPTY_DIR=1

$RUBY autoproj_bootstrap $@ git $GET_REPO push_to=$PUSH_TO $BOOTSTRAP_ARGS branch=$ESROCOS_BRANCH

# SOURCE Autoproj envs, update, resolve dependencies and build

if test "x$@" != "xlocaldev"; then
    echo "source env.sh"
    $SHELL -c '. $PWD/env.sh; autoproj update; autoproj osdeps; autoproj build'
fi
